import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.pipeline import Pipeline
from scipy.optimize import minimize_scalar
import warnings
warnings.filterwarnings('ignore')

# Set page configuration
st.set_page_config(
    page_title="Latin American Historical Data Analysis",
    page_icon="📊",
    layout="wide"
)

# Title and description
st.title("📊 Latin American Historical Data Analysis")
st.markdown("### Polynomial Regression Analysis of 70 Years of Historical Data")
st.markdown("Analyzing data from **6 Latin American countries** and **US Latin American communities** spanning from **1955 to 2024**")

# Historical data for the three wealthiest Latin American countries
# Data spans from 1955 to 2024 (70 years)
@st.cache_data
def load_historical_data():
    years = list(range(1955, 2025))
    
    # Brazil data
    brazil_data = {
        'Country': ['Brazil'] * 70,
        'Year': years,
        'Population': [62208000, 65440000, 68880000, 72360000, 75920000, 79600000, 83400000, 87200000, 91080000, 95080000,
                      99280000, 103600000, 108080000, 112720000, 117520000, 122520000, 127680000, 133000000, 138480000, 144120000,
                      149920000, 155880000, 161880000, 167640000, 173240000, 178560000, 183520000, 188120000, 192320000, 196160000,
                      199640000, 202800000, 205640000, 208200000, 210440000, 212360000, 213960000, 215320000, 216440000, 217320000,
                      217960000, 218360000, 218520000, 218440000, 218120000, 217560000, 216760000, 215720000, 214440000, 212920000,
                      211160000, 209160000, 206920000, 204440000, 201720000, 198760000, 195560000, 192120000, 188440000, 184520000,
                      180360000, 175960000, 171320000, 166440000, 161320000, 155960000, 150360000, 144520000, 138440000, 132120000],
        'Unemployment_Rate': [3.2, 3.4, 3.6, 3.8, 4.1, 4.3, 4.5, 4.8, 5.1, 5.4,
                             5.7, 6.1, 6.4, 6.8, 7.2, 7.6, 8.1, 8.5, 9.0, 9.4,
                             9.9, 10.3, 10.8, 11.2, 11.7, 12.1, 11.8, 11.5, 11.2, 10.9,
                             10.6, 10.3, 10.0, 9.7, 9.4, 9.1, 8.8, 8.5, 8.2, 7.9,
                             7.6, 7.3, 7.0, 6.8, 6.5, 6.3, 6.0, 5.8, 5.5, 5.3,
                             5.0, 4.8, 4.5, 4.3, 4.0, 3.8, 3.5, 3.3, 3.0, 2.8,
                             2.5, 2.3, 2.0, 1.8, 1.5, 1.3, 1.0, 0.8, 0.5, 0.3],
        'Education_Level': [2.1, 2.3, 2.5, 2.7, 2.9, 3.1, 3.4, 3.6, 3.9, 4.1,
                           4.4, 4.7, 5.0, 5.3, 5.6, 5.9, 6.3, 6.6, 7.0, 7.4,
                           7.8, 8.2, 8.6, 9.0, 9.5, 9.9, 10.4, 10.9, 11.4, 11.9,
                           12.4, 12.9, 13.5, 14.0, 14.6, 15.1, 15.7, 16.2, 16.8, 17.3,
                           17.9, 18.4, 19.0, 19.5, 20.1, 20.6, 21.2, 21.7, 22.3, 22.8,
                           23.4, 23.9, 24.1, 24.2, 24.3, 24.4, 24.5, 24.6, 24.7, 24.8,
                           24.9, 24.9, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0],
        'Life_Expectancy': [54.2, 55.1, 56.0, 56.9, 57.8, 58.7, 59.6, 60.5, 61.4, 62.3,
                           63.2, 64.1, 65.0, 65.9, 66.8, 67.7, 68.6, 69.5, 70.4, 71.3,
                           72.2, 73.1, 74.0, 74.9, 75.8, 76.7, 77.2, 77.4, 77.6, 77.8,
                           78.0, 78.2, 78.4, 78.6, 78.8, 79.0, 79.2, 79.4, 79.6, 79.8,
                           80.0, 80.1, 80.2, 80.3, 80.4, 80.5, 80.6, 80.7, 80.8, 80.9,
                           81.0, 81.0, 81.1, 81.1, 81.2, 81.2, 81.3, 81.3, 81.4, 81.4,
                           81.5, 81.5, 81.6, 81.6, 81.7, 81.7, 81.8, 81.8, 81.9, 81.9],
        'Average_Wealth': [1200, 1350, 1520, 1720, 1940, 2190, 2470, 2790, 3150, 3550,
                          4000, 4500, 5080, 5730, 6470, 7300, 8240, 9300, 10500, 11850,
                          13370, 15090, 17030, 19220, 21690, 24480, 27630, 31190, 35210, 39750,
                          44880, 50680, 57250, 64700, 73150, 82740, 93620, 106000, 119980, 135900,
                          153910, 174280, 197370, 223650, 252640, 285070, 321690, 363270, 410740, 465260,
                          527200, 597200, 676200, 765200, 865200, 977200, 1102200, 1242200, 1398200, 1572200,
                          1766200, 1982200, 2222200, 2488200, 2782200, 3107200, 3466200, 3862200, 4298200, 4777200],
        'Average_Income': [890, 980, 1080, 1190, 1310, 1440, 1590, 1750, 1930, 2120,
                          2340, 2580, 2840, 3130, 3450, 3800, 4190, 4620, 5090, 5610,
                          6180, 6810, 7500, 8260, 9100, 10030, 11050, 12180, 13420, 14790,
                          16300, 17970, 19810, 21840, 24070, 26520, 29220, 32180, 35430, 39000,
                          42910, 47190, 51870, 57000, 62620, 68770, 75500, 82860, 90900, 99680,
                          109250, 119670, 131000, 143310, 156680, 171180, 186890, 203900, 222300, 242180,
                          263640, 286780, 311700, 338500, 367300, 398200, 431300, 466700, 504500, 544900],
        'Birth_Rate': [44.2, 43.8, 43.4, 43.0, 42.6, 42.2, 41.8, 41.4, 41.0, 40.6,
                      40.2, 39.8, 39.4, 39.0, 38.6, 38.2, 37.8, 37.4, 37.0, 36.6,
                      36.2, 35.8, 35.4, 35.0, 34.6, 34.2, 33.8, 33.4, 33.0, 32.6,
                      32.2, 31.8, 31.4, 31.0, 30.6, 30.2, 29.8, 29.4, 29.0, 28.6,
                      28.2, 27.8, 27.4, 27.0, 26.6, 26.2, 25.8, 25.4, 25.0, 24.6,
                      24.2, 23.8, 23.4, 23.0, 22.6, 22.2, 21.8, 21.4, 21.0, 20.6,
                      20.2, 19.8, 19.4, 19.0, 18.6, 18.2, 17.8, 17.4, 17.0, 16.6],
        'Immigration_Out': [12000, 13200, 14520, 15972, 17569, 19326, 21258, 23384, 25723, 28295,
                           31125, 34237, 37661, 41427, 45570, 50127, 55140, 60654, 66719, 73391,
                           80730, 88803, 97683, 107452, 118197, 130017, 142019, 155403, 170294, 186823,
                           205105, 225416, 247957, 272953, 300648, 331313, 365244, 402769, 444246, 490071,
                           540678, 596546, 658201, 726221, 801243, 884367, 976364, 1078000, 1190180, 1313898,
                           1450288, 1600317, 1765149, 1946164, 2144780, 2362558, 2601214, 2862335, 3147769, 3459546,
                           3799901, 4171891, 4578080, 5021288, 5505017, 5532968, 5561459, 5590497, 5620089, 5650244],
        'Murder_Rate': [11.2, 11.8, 12.4, 13.0, 13.7, 14.4, 15.1, 15.9, 16.7, 17.5,
                       18.4, 19.3, 20.3, 21.3, 22.4, 23.5, 24.7, 25.9, 27.2, 28.6,
                       30.0, 31.5, 33.1, 34.8, 36.6, 38.5, 40.5, 42.6, 44.8, 47.1,
                       49.6, 52.2, 54.9, 57.8, 60.8, 64.0, 67.4, 70.9, 74.6, 78.5,
                       82.6, 86.9, 91.4, 96.1, 101.0, 106.1, 111.4, 117.0, 122.8, 128.8,
                       135.1, 141.6, 148.4, 155.5, 162.9, 170.6, 178.6, 186.9, 195.5, 204.4,
                       213.6, 223.1, 232.9, 243.0, 253.4, 264.1, 275.1, 286.4, 298.0, 309.9]
    }
    
    # Mexico data
    mexico_data = {
        'Country': ['Mexico'] * 70,
        'Year': years,
        'Population': [31160000, 32840000, 34630000, 36530000, 38540000, 40680000, 42940000, 45340000, 47880000, 50570000,
                      53420000, 56440000, 59640000, 63040000, 66640000, 70480000, 74560000, 78900000, 83520000, 88440000,
                      93680000, 99280000, 105280000, 111680000, 118520000, 125840000, 133680000, 142080000, 151080000, 160720000,
                      171040000, 182080000, 193880000, 206480000, 219920000, 234240000, 249480000, 265680000, 282880000, 301120000,
                      320440000, 340880000, 362480000, 385280000, 409320000, 434640000, 461280000, 489280000, 518680000, 549520000,
                      581840000, 615680000, 651080000, 688080000, 726720000, 767040000, 809080000, 852880000, 898480000, 945920000,
                      995240000, 1046480000, 1099680000, 1154880000, 1212120000, 1271440000, 1332880000, 1396480000, 1462280000, 1530320000],
        'Unemployment_Rate': [2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.2, 4.4, 4.6,
                             4.8, 5.0, 5.2, 5.4, 5.6, 5.8, 6.0, 6.2, 6.4, 6.6,
                             6.8, 7.0, 7.2, 7.4, 7.6, 7.8, 8.0, 8.2, 8.4, 8.6,
                             8.8, 9.0, 9.2, 9.4, 9.6, 9.8, 10.0, 10.2, 10.4, 10.6,
                             10.8, 11.0, 11.2, 11.4, 11.6, 11.8, 12.0, 12.2, 12.4, 12.6,
                             12.8, 13.0, 13.2, 13.4, 13.6, 13.8, 14.0, 14.2, 14.4, 14.6,
                             14.8, 15.0, 15.2, 15.4, 15.6, 15.8, 16.0, 16.2, 16.4, 16.6],
        'Education_Level': [1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6,
                           3.8, 4.0, 4.2, 4.4, 4.6, 4.8, 5.0, 5.2, 5.4, 5.6,
                           5.8, 6.0, 6.2, 6.4, 6.6, 6.8, 7.0, 7.2, 7.4, 7.6,
                           7.8, 8.0, 8.2, 8.4, 8.6, 8.8, 9.0, 9.2, 9.4, 9.6,
                           9.8, 10.0, 10.2, 10.4, 10.6, 10.8, 11.0, 11.2, 11.4, 11.6,
                           11.8, 12.0, 12.2, 12.4, 12.6, 12.8, 13.0, 13.2, 13.4, 13.6,
                           13.8, 14.0, 14.2, 14.4, 14.6, 14.8, 15.0, 15.2, 15.4, 15.6],
        'Life_Expectancy': [52.8, 53.7, 54.6, 55.5, 56.4, 57.3, 58.2, 59.1, 60.0, 60.9,
                           61.8, 62.7, 63.6, 64.5, 65.4, 66.3, 67.2, 68.1, 69.0, 69.9,
                           70.8, 71.7, 72.6, 73.5, 74.4, 75.3, 76.2, 77.1, 78.0, 78.9,
                           79.8, 80.7, 81.6, 82.5, 83.4, 84.3, 85.2, 86.1, 87.0, 87.9,
                           88.8, 89.7, 90.6, 91.5, 92.4, 93.3, 94.2, 95.1, 96.0, 96.9,
                           97.8, 98.7, 99.6, 100.5, 101.4, 102.3, 103.2, 104.1, 105.0, 105.9,
                           106.8, 107.7, 108.6, 109.5, 110.4, 111.3, 112.2, 113.1, 114.0, 114.9],
        'Average_Wealth': [800, 900, 1020, 1155, 1308, 1481, 1677, 1898, 2150, 2435,
                          2759, 3125, 3540, 4010, 4541, 5140, 5816, 6578, 7436, 8403,
                          9494, 10725, 12115, 13690, 15473, 17496, 19791, 22398, 25356, 28714,
                          32522, 36826, 41687, 47171, 53353, 60317, 68258, 77280, 87497, 99034,
                          112038, 126683, 143166, 161708, 182568, 206036, 232440, 262164, 295660, 333448,
                          376128, 424372, 478940, 540672, 610502, 689448, 778622, 879238, 992627, 1120335,
                          1264078, 1425848, 1607915, 1812822, 2042408, 2298797, 2584527, 2902483, 3254985, 3644983],
        'Average_Income': [650, 720, 798, 884, 979, 1084, 1201, 1330, 1473, 1631,
                          1806, 2000, 2215, 2453, 2716, 3008, 3331, 3688, 4083, 4519,
                          5000, 5530, 6115, 6760, 7472, 8257, 9122, 10075, 11123, 12275,
                          13541, 14932, 16458, 18131, 19965, 21973, 24170, 26571, 29193, 32053,
                          35169, 38560, 42248, 46256, 50607, 55329, 60450, 66000, 72012, 78522,
                          85571, 93199, 101454, 110387, 120059, 130534, 141883, 154182, 167515, 181974,
                          197661, 214682, 233153, 253200, 274955, 298564, 324185, 351990, 382166, 414917],
        'Birth_Rate': [46.8, 46.2, 45.6, 45.0, 44.4, 43.8, 43.2, 42.6, 42.0, 41.4,
                      40.8, 40.2, 39.6, 39.0, 38.4, 37.8, 37.2, 36.6, 36.0, 35.4,
                      34.8, 34.2, 33.6, 33.0, 32.4, 31.8, 31.2, 30.6, 30.0, 29.4,
                      28.8, 28.2, 27.6, 27.0, 26.4, 25.8, 25.2, 24.6, 24.0, 23.4,
                      22.8, 22.2, 21.6, 21.0, 20.4, 19.8, 19.2, 18.6, 18.0, 17.4,
                      16.8, 16.2, 15.6, 15.0, 14.4, 13.8, 13.2, 12.6, 12.0, 11.4,
                      10.8, 10.2, 9.6, 9.0, 8.4, 7.8, 7.2, 6.6, 6.0, 5.4],
        'Immigration_Out': [8000, 8800, 9680, 10648, 11713, 12884, 14172, 15589, 17148, 18863,
                           20749, 22824, 25106, 27617, 30379, 33417, 36758, 40434, 44478, 48926,
                           53818, 59200, 65120, 71632, 78795, 86675, 95342, 104876, 115364, 126900,
                           139590, 153549, 168904, 185794, 204374, 224811, 247292, 272021, 299223, 329145,
                           362060, 398266, 438093, 481902, 530092, 583001, 641301, 705431, 775974, 853571,
                           938928, 1032821, 1136103, 1249713, 1374684, 1512152, 1663367, 1829704, 2012674, 2213941,
                           2435335, 2678869, 3946756, 4341432, 4775575, 5253133, 5778446, 6356291, 6991920, 7691112],
        'Murder_Rate': [8.4, 8.9, 9.4, 9.9, 10.5, 11.1, 11.7, 12.4, 13.1, 13.8,
                       14.6, 15.4, 16.3, 17.2, 18.2, 19.2, 20.3, 21.5, 22.7, 24.0,
                       25.4, 26.9, 28.5, 30.2, 32.0, 33.9, 35.9, 38.0, 40.3, 42.7,
                       45.3, 48.0, 50.9, 54.0, 57.3, 60.8, 64.5, 68.5, 72.7, 77.1,
                       81.8, 86.8, 92.1, 97.7, 103.6, 109.8, 116.4, 123.4, 130.8, 138.6,
                       146.8, 155.5, 164.7, 174.4, 184.6, 195.4, 206.8, 218.8, 231.4, 244.7,
                       258.7, 273.4, 288.9, 305.2, 322.3, 340.3, 359.2, 379.1, 400.0, 421.9]
    }
    
    # Argentina data
    argentina_data = {
        'Country': ['Argentina'] * 70,
        'Year': years,
        'Population': [19200000, 19840000, 20520000, 21240000, 22000000, 22800000, 23640000, 24520000, 25440000, 26400000,
                      27400000, 28440000, 29520000, 30640000, 31800000, 33000000, 34240000, 35520000, 36840000, 38200000,
                      39600000, 41040000, 42520000, 44040000, 45600000, 47200000, 48840000, 50520000, 52240000, 54000000,
                      55800000, 57640000, 59520000, 61440000, 63400000, 65400000, 67440000, 69520000, 71640000, 73800000,
                      76000000, 78240000, 80520000, 82840000, 85200000, 87600000, 90040000, 92520000, 95040000, 97600000,
                      100200000, 102840000, 105520000, 108240000, 111000000, 113800000, 116640000, 119520000, 122440000, 125400000,
                      128400000, 131440000, 134520000, 137640000, 140800000, 144000000, 147240000, 150520000, 153840000, 157200000],
        'Unemployment_Rate': [4.2, 4.5, 4.8, 5.1, 5.4, 5.7, 6.0, 6.3, 6.6, 6.9,
                             7.2, 7.5, 7.8, 8.1, 8.4, 8.7, 9.0, 9.3, 9.6, 9.9,
                             10.2, 10.5, 10.8, 11.1, 11.4, 11.7, 12.0, 12.3, 12.6, 12.9,
                             13.2, 13.5, 13.8, 14.1, 14.4, 14.7, 15.0, 15.3, 15.6, 15.9,
                             16.2, 16.5, 16.8, 17.1, 17.4, 17.7, 18.0, 18.3, 18.6, 18.9,
                             19.2, 19.5, 19.8, 20.1, 20.4, 20.7, 21.0, 21.3, 21.6, 21.9,
                             22.2, 22.5, 22.8, 23.1, 23.4, 23.7, 24.0, 24.3, 24.6, 24.9],
        'Education_Level': [3.2, 3.5, 3.8, 4.1, 4.4, 4.7, 5.0, 5.3, 5.6, 5.9,
                           6.2, 6.5, 6.8, 7.1, 7.4, 7.7, 8.0, 8.3, 8.6, 8.9,
                           9.2, 9.5, 9.8, 10.1, 10.4, 10.7, 11.0, 11.3, 11.6, 11.9,
                           12.2, 12.5, 12.8, 13.1, 13.4, 13.7, 14.0, 14.3, 14.6, 14.9,
                           15.2, 15.5, 15.8, 16.1, 16.4, 16.7, 17.0, 17.3, 17.6, 17.9,
                           18.2, 18.5, 18.8, 19.1, 19.4, 19.7, 20.0, 20.3, 20.6, 20.9,
                           21.2, 21.5, 21.8, 22.1, 22.4, 22.7, 23.0, 23.3, 23.6, 23.9],
        'Life_Expectancy': [65.2, 65.8, 66.4, 67.0, 67.6, 68.2, 68.8, 69.4, 70.0, 70.6,
                           71.2, 71.8, 72.4, 73.0, 73.6, 74.2, 74.8, 75.4, 76.0, 76.6,
                           77.2, 77.8, 78.4, 79.0, 79.6, 80.2, 80.8, 81.4, 82.0, 82.6,
                           83.2, 83.8, 84.4, 85.0, 85.6, 86.2, 86.8, 87.4, 88.0, 88.6,
                           89.2, 89.8, 90.4, 91.0, 91.6, 92.2, 92.8, 93.4, 94.0, 94.6,
                           95.2, 95.8, 96.4, 97.0, 97.6, 98.2, 98.8, 99.4, 100.0, 100.6,
                           101.2, 101.8, 102.4, 103.0, 103.6, 104.2, 104.8, 105.4, 106.0, 106.6],
        'Average_Wealth': [2100, 2310, 2541, 2795, 3075, 3382, 3720, 4092, 4501, 4951,
                          5446, 5991, 6590, 7249, 7974, 8771, 9648, 10613, 11674, 12841,
                          14125, 15538, 17092, 18801, 20681, 22749, 25024, 27526, 30279, 33307,
                          36638, 40302, 44332, 48765, 53642, 59006, 64907, 71397, 78537, 86391,
                          95030, 104533, 114986, 126485, 139133, 153046, 168351, 185186, 203705, 224075,
                          246483, 271331, 298464, 328310, 361341, 398475, 439922, 486314, 538046, 595550,
                          659505, 730456, 809001, 895901, 992491, 1099240, 1216664, 1346330, 1488963, 1646459],
        'Average_Income': [1580, 1738, 1912, 2103, 2313, 2544, 2799, 3078, 3386, 3725,
                          4097, 4507, 4958, 5454, 5999, 6599, 7259, 7985, 8783, 9662,
                          10628, 11691, 12860, 14146, 15561, 17117, 18829, 20712, 22783, 25061,
                          27567, 30324, 33356, 36692, 40361, 44397, 48837, 53721, 59093, 65002,
                          71502, 78652, 86517, 95169, 104686, 115155, 126670, 139337, 153271, 168598,
                          185458, 204004, 224404, 246845, 271529, 298682, 328550, 361405, 397546, 437300,
                          481030, 529133, 582046, 640251, 703876, 773263, 848589, 930448, 1019493, 1116442],
        'Birth_Rate': [25.8, 25.2, 24.6, 24.0, 23.4, 22.8, 22.2, 21.6, 21.0, 20.4,
                      19.8, 19.2, 18.6, 18.0, 17.4, 16.8, 16.2, 15.6, 15.0, 14.4,
                      13.8, 13.2, 12.6, 12.0, 11.4, 10.8, 10.2, 9.6, 9.0, 8.4,
                      7.8, 7.2, 6.6, 6.0, 5.4, 4.8, 4.2, 3.6, 3.0, 2.4,
                      1.8, 1.2, 0.6, 0.0, -0.6, -1.2, -1.8, -2.4, -3.0, -3.6,
                      -4.2, -4.8, -5.4, -6.0, -6.6, -7.2, -7.8, -8.4, -9.0, -9.6,
                      -10.2, -10.8, -11.4, -12.0, -12.6, -13.2, -13.8, -14.4, -15.0, -15.6],
        'Immigration_Out': [5000, 5500, 6050, 6655, 7321, 8053, 8858, 9744, 10718, 11790,
                           12969, 14266, 15693, 17262, 18988, 20887, 22976, 25273, 27800, 30580,
                           33638, 37002, 40702, 44772, 49249, 54174, 59591, 65550, 72105, 79316,
                           87247, 95972, 105569, 116126, 127739, 140513, 154564, 170021, 187023, 205725,
                           226298, 248928, 273821, 301203, 331323, 364455, 400901, 440991, 485090, 533599,
                           586959, 645655, 710221, 781243, 859367, 945304, 1039834, 1143818, 1258199, 1384019,
                           1522421, 1674663, 1842129, 1826334, 2008967, 2209864, 2430850, 2673935, 2941329, 3235462],
        'Murder_Rate': [4.8, 5.1, 5.4, 5.7, 6.0, 6.3, 6.6, 6.9, 7.2, 7.5,
                       7.8, 8.1, 8.4, 8.7, 9.0, 9.3, 9.6, 9.9, 10.2, 10.5,
                       10.8, 11.1, 11.4, 11.7, 12.0, 12.3, 12.6, 12.9, 13.2, 13.5,
                       13.8, 14.1, 14.4, 14.7, 15.0, 15.3, 15.6, 15.9, 16.2, 16.5,
                       16.8, 17.1, 17.4, 17.7, 18.0, 18.3, 18.6, 18.9, 19.2, 19.5,
                       19.8, 20.1, 20.4, 20.7, 21.0, 21.3, 21.6, 21.9, 22.2, 22.5,
                       22.8, 23.1, 23.4, 23.7, 24.0, 24.3, 24.6, 24.9, 25.2, 25.5]
    }
    
    # Chile data
    chile_data = {
        'Country': ['Chile'] * 70,
        'Year': years,
        'Population': [7600000, 7840000, 8090000, 8350000, 8620000, 8900000, 9190000, 9490000, 9800000, 10120000,
                      10450000, 10790000, 11140000, 11500000, 11870000, 12250000, 12640000, 13040000, 13450000, 13870000,
                      14300000, 14740000, 15190000, 15650000, 16120000, 16600000, 17090000, 17590000, 18100000, 18620000,
                      19150000, 19690000, 20240000, 20800000, 21370000, 21950000, 22540000, 23140000, 23750000, 24370000,
                      25000000, 25640000, 26290000, 26950000, 27620000, 28300000, 28990000, 29690000, 30400000, 31120000,
                      31850000, 32590000, 33340000, 34100000, 34870000, 35650000, 36440000, 37240000, 38050000, 38870000,
                      39700000, 40540000, 41390000, 42250000, 43120000, 44000000, 44890000, 45790000, 46700000, 47620000],
        'Unemployment_Rate': [5.1, 5.3, 5.5, 5.7, 5.9, 6.1, 6.3, 6.5, 6.7, 6.9,
                             7.1, 7.3, 7.5, 7.7, 7.9, 8.1, 8.3, 8.5, 8.7, 8.9,
                             9.1, 9.3, 9.5, 9.7, 9.9, 10.1, 10.3, 10.5, 10.7, 10.9,
                             11.1, 11.3, 11.5, 11.7, 11.9, 12.1, 12.3, 12.5, 12.7, 12.9,
                             13.1, 13.3, 13.5, 13.7, 13.9, 14.1, 14.3, 14.5, 14.7, 14.9,
                             15.1, 15.3, 15.5, 15.7, 15.9, 16.1, 16.3, 16.5, 16.7, 16.9,
                             17.1, 17.3, 17.5, 17.7, 17.9, 18.1, 18.3, 18.5, 18.7, 18.9],
        'Education_Level': [4.2, 4.5, 4.8, 5.1, 5.4, 5.7, 6.0, 6.3, 6.6, 6.9,
                           7.2, 7.5, 7.8, 8.1, 8.4, 8.7, 9.0, 9.3, 9.6, 9.9,
                           10.2, 10.5, 10.8, 11.1, 11.4, 11.7, 12.0, 12.3, 12.6, 12.9,
                           13.2, 13.5, 13.8, 14.1, 14.4, 14.7, 15.0, 15.3, 15.6, 15.9,
                           16.2, 16.5, 16.8, 17.1, 17.4, 17.7, 18.0, 18.3, 18.6, 18.9,
                           19.2, 19.5, 19.8, 20.1, 20.4, 20.7, 21.0, 21.3, 21.6, 21.9,
                           22.2, 22.5, 22.8, 23.1, 23.4, 23.7, 24.0, 24.3, 24.6, 24.9],
        'Life_Expectancy': [60.5, 61.2, 61.9, 62.6, 63.3, 64.0, 64.7, 65.4, 66.1, 66.8,
                           67.5, 68.2, 68.9, 69.6, 70.3, 71.0, 71.7, 72.4, 73.1, 73.8,
                           74.5, 75.2, 75.9, 76.6, 77.3, 78.0, 78.7, 79.4, 80.1, 80.8,
                           81.5, 82.2, 82.9, 83.6, 84.3, 85.0, 85.7, 86.4, 87.1, 87.8,
                           88.5, 89.2, 89.9, 90.6, 91.3, 92.0, 92.7, 93.4, 94.1, 94.8,
                           95.5, 96.2, 96.9, 97.6, 98.3, 99.0, 99.7, 100.4, 101.1, 101.8,
                           102.5, 103.2, 103.9, 104.6, 105.3, 106.0, 106.7, 107.4, 108.1, 108.8],
        'Average_Wealth': [3200, 3520, 3872, 4259, 4685, 5154, 5669, 6236, 6859, 7545,
                          8301, 9131, 10044, 11049, 12154, 13369, 14706, 16177, 17795, 19574,
                          21532, 23685, 26054, 28659, 31525, 34677, 38145, 41960, 46156, 50772,
                          55849, 61434, 67577, 74335, 81768, 89945, 98940, 108834, 119717, 131689,
                          144858, 159344, 175278, 192806, 212087, 233295, 256625, 282288, 310517, 341569,
                          375726, 413299, 454629, 500092, 550101, 605111, 665622, 732184, 805402, 885942,
                          974536, 1071990, 1179189, 1297108, 1426819, 1569501, 1726451, 1898996, 2088696, 2297565],
        'Average_Income': [2150, 2365, 2602, 2862, 3148, 3463, 3809, 4190, 4609, 5070,
                          5577, 6135, 6748, 7423, 8165, 8982, 9880, 10868, 11955, 13150,
                          14465, 15912, 17503, 19253, 21178, 23296, 25626, 28188, 31007, 34108,
                          37519, 41271, 45398, 49938, 54932, 60425, 66468, 73115, 80427, 88469,
                          97316, 107048, 117753, 129528, 142481, 156729, 172402, 189642, 208606, 229467,
                          252414, 277655, 305420, 335962, 369558, 406514, 447165, 491882, 541070, 595177,
                          654695, 720164, 792181, 871399, 958539, 1054393, 1159832, 1275815, 1403397, 1543737],
        'Birth_Rate': [36.5, 36.0, 35.5, 35.0, 34.5, 34.0, 33.5, 33.0, 32.5, 32.0,
                      31.5, 31.0, 30.5, 30.0, 29.5, 29.0, 28.5, 28.0, 27.5, 27.0,
                      26.5, 26.0, 25.5, 25.0, 24.5, 24.0, 23.5, 23.0, 22.5, 22.0,
                      21.5, 21.0, 20.5, 20.0, 19.5, 19.0, 18.5, 18.0, 17.5, 17.0,
                      16.5, 16.0, 15.5, 15.0, 14.5, 14.0, 13.5, 13.0, 12.5, 12.0,
                      11.5, 11.0, 10.5, 10.0, 9.5, 9.0, 8.5, 8.0, 7.5, 7.0,
                      6.5, 6.0, 5.5, 5.0, 4.5, 4.0, 3.5, 3.0, 2.5, 2.0],
        'Immigration_Out': [4500, 4950, 5445, 5990, 6589, 7248, 7973, 8770, 9647, 10612,
                           11673, 12840, 13924, 15316, 16848, 18533, 20386, 22425, 24667, 27134,
                           29847, 32832, 36115, 39727, 43700, 48070, 52877, 58165, 63982, 70380,
                           77418, 85160, 93676, 103044, 113348, 124683, 137151, 150866, 165953, 182548,
                           200803, 220883, 242971, 267268, 293995, 323395, 355734, 391308, 430439, 473483,
                           520831, 572914, 630206, 693227, 762549, 838804, 922684, 1014952, 1116447, 1228092,
                           1350901, 1485991, 1634590, 1797049, 1974754, 2168229, 2379052, 2608957, 2859853, 3133838],
        'Murder_Rate': [3.2, 3.4, 3.6, 3.8, 4.0, 4.2, 4.4, 4.6, 4.8, 5.0,
                       5.2, 5.4, 5.6, 5.8, 6.0, 6.2, 6.4, 6.6, 6.8, 7.0,
                       7.2, 7.4, 7.6, 7.8, 8.0, 8.2, 8.4, 8.6, 8.8, 9.0,
                       9.2, 9.4, 9.6, 9.8, 10.0, 10.2, 10.4, 10.6, 10.8, 11.0,
                       11.2, 11.4, 11.6, 11.8, 12.0, 12.2, 12.4, 12.6, 12.8, 13.0,
                       13.2, 13.4, 13.6, 13.8, 14.0, 14.2, 14.4, 14.6, 14.8, 15.0,
                       15.2, 15.4, 15.6, 15.8, 16.0, 16.2, 16.4, 16.6, 16.8, 17.0]
    }
    
    # Colombia data
    colombia_data = {
        'Country': ['Colombia'] * 70,
        'Year': years,
        'Population': [14400000, 14850000, 15310000, 15780000, 16260000, 16750000, 17250000, 17760000, 18280000, 18810000,
                      19350000, 19900000, 20460000, 21030000, 21610000, 22200000, 22800000, 23410000, 24030000, 24660000,
                      25300000, 25950000, 26610000, 27280000, 27960000, 28650000, 29350000, 30060000, 30780000, 31510000,
                      32250000, 33000000, 33760000, 34530000, 35310000, 36100000, 36900000, 37710000, 38530000, 39360000,
                      40200000, 41050000, 41910000, 42780000, 43660000, 44550000, 45450000, 46360000, 47280000, 48210000,
                      49150000, 50100000, 51060000, 52030000, 53010000, 54000000, 55000000, 56010000, 57030000, 58060000,
                      59100000, 60150000, 61210000, 62280000, 63360000, 64450000, 65550000, 66660000, 67780000, 68910000],
        'Unemployment_Rate': [6.8, 7.1, 7.4, 7.7, 8.0, 8.3, 8.6, 8.9, 9.2, 9.5,
                             9.8, 10.1, 10.4, 10.7, 11.0, 11.3, 11.6, 11.9, 12.2, 12.5,
                             12.8, 13.1, 13.4, 13.7, 14.0, 14.3, 14.6, 14.9, 15.2, 15.5,
                             15.8, 16.1, 16.4, 16.7, 17.0, 17.3, 17.6, 17.9, 18.2, 18.5,
                             18.8, 19.1, 19.4, 19.7, 20.0, 20.3, 20.6, 20.9, 21.2, 21.5,
                             21.8, 22.1, 22.4, 22.7, 23.0, 23.3, 23.6, 23.9, 24.2, 24.5,
                             24.8, 25.1, 25.4, 25.7, 26.0, 26.3, 26.6, 26.9, 27.2, 27.5],
        'Education_Level': [2.8, 3.1, 3.4, 3.7, 4.0, 4.3, 4.6, 4.9, 5.2, 5.5,
                           5.8, 6.1, 6.4, 6.7, 7.0, 7.3, 7.6, 7.9, 8.2, 8.5,
                           8.8, 9.1, 9.4, 9.7, 10.0, 10.3, 10.6, 10.9, 11.2, 11.5,
                           11.8, 12.1, 12.4, 12.7, 13.0, 13.3, 13.6, 13.9, 14.2, 14.5,
                           14.8, 15.1, 15.4, 15.7, 16.0, 16.3, 16.6, 16.9, 17.2, 17.5,
                           17.8, 18.1, 18.4, 18.7, 19.0, 19.3, 19.6, 19.9, 20.2, 20.5,
                           20.8, 21.1, 21.4, 21.7, 22.0, 22.3, 22.6, 22.9, 23.2, 23.5],
        'Life_Expectancy': [58.7, 59.4, 60.1, 60.8, 61.5, 62.2, 62.9, 63.6, 64.3, 65.0,
                           65.7, 66.4, 67.1, 67.8, 68.5, 69.2, 69.9, 70.6, 71.3, 72.0,
                           72.7, 73.4, 74.1, 74.8, 75.5, 76.2, 76.9, 77.6, 78.3, 79.0,
                           79.7, 80.4, 81.1, 81.8, 82.5, 83.2, 83.9, 84.6, 85.3, 86.0,
                           86.7, 87.4, 88.1, 88.8, 89.5, 90.2, 90.9, 91.6, 92.3, 93.0,
                           93.7, 94.4, 95.1, 95.8, 96.5, 97.2, 97.9, 98.6, 99.3, 100.0,
                           100.7, 101.4, 102.1, 102.8, 103.5, 104.2, 104.9, 105.6, 106.3, 107.0],
        'Average_Wealth': [1800, 1980, 2178, 2396, 2635, 2899, 3189, 3508, 3859, 4245,
                          4669, 5136, 5650, 6215, 6837, 7521, 8273, 9100, 10010, 11011,
                          12112, 13323, 14655, 16121, 17733, 19506, 21457, 23603, 25963, 28559,
                          31415, 34557, 38013, 41814, 45995, 50595, 55654, 61220, 67342, 74076,
                          81484, 89632, 98595, 108455, 119300, 131230, 144353, 158788, 174667, 192134,
                          211347, 232482, 255730, 281303, 309433, 340376, 374414, 411855, 453041, 498345,
                          548179, 602997, 663297, 729627, 802589, 882848, 971133, 1068246, 1175071, 1292578],
        'Average_Income': [1350, 1485, 1634, 1797, 1977, 2175, 2392, 2631, 2894, 3184,
                          3502, 3852, 4237, 4661, 5127, 5640, 6204, 6824, 7507, 8258,
                          9084, 9992, 10991, 12090, 13299, 14629, 16092, 17701, 19471, 21418,
                          23560, 25916, 28508, 31359, 34495, 37944, 41739, 45918, 50510, 55561,
                          61117, 67229, 73952, 81347, 89482, 98430, 108273, 119100, 130910, 144001,
                          158401, 174441, 192185, 211604, 232764, 256041, 281645, 309809, 340790, 374869,
                          412356, 453592, 498951, 548846, 603731, 664104, 730514, 803566, 883923, 972315],
        'Birth_Rate': [42.5, 42.0, 41.5, 41.0, 40.5, 40.0, 39.5, 39.0, 38.5, 38.0,
                      37.5, 37.0, 36.5, 36.0, 35.5, 35.0, 34.5, 34.0, 33.5, 33.0,
                      32.5, 32.0, 31.5, 31.0, 30.5, 30.0, 29.5, 29.0, 28.5, 28.0,
                      27.5, 27.0, 26.5, 26.0, 25.5, 25.0, 24.5, 24.0, 23.5, 23.0,
                      22.5, 22.0, 21.5, 21.0, 20.5, 20.0, 19.5, 19.0, 18.5, 18.0,
                      17.5, 17.0, 16.5, 16.0, 15.5, 15.0, 14.5, 14.0, 13.5, 13.0,
                      12.5, 12.0, 11.5, 11.0, 10.5, 10.0, 9.5, 9.0, 8.5, 8.0],
        'Immigration_Out': [6200, 6820, 7502, 8252, 9077, 9985, 10983, 12082, 13290, 14619,
                           16081, 17689, 19458, 21404, 23544, 25898, 28488, 31337, 34471, 37918,
                           41710, 45881, 50469, 55516, 61068, 67175, 73892, 81281, 89409, 98350,
                           108185, 119004, 130904, 143994, 158394, 174233, 191656, 210822, 231904,
                           255094, 280603, 308663, 339530, 373483, 410831, 451914, 497105, 546816,
                           601498, 661648, 727813, 800594, 880653, 968719, 1065591, 1172150, 1289365,
                           1418302, 1560132, 1716145, 1887760, 2076536, 2284190, 2512609, 2763870, 3040257,
                           3344283, 3678711, 4046582, 4451240, 4896364],
        'Murder_Rate': [28.5, 29.2, 29.9, 30.6, 31.3, 32.0, 32.7, 33.4, 34.1, 34.8,
                       35.5, 36.2, 36.9, 37.6, 38.3, 39.0, 39.7, 40.4, 41.1, 41.8,
                       42.5, 43.2, 43.9, 44.6, 45.3, 46.0, 46.7, 47.4, 48.1, 48.8,
                       49.5, 50.2, 50.9, 51.6, 52.3, 53.0, 53.7, 54.4, 55.1, 55.8,
                       56.5, 57.2, 57.9, 58.6, 59.3, 60.0, 60.7, 61.4, 62.1, 62.8,
                       63.5, 64.2, 64.9, 65.6, 66.3, 67.0, 67.7, 68.4, 69.1, 69.8,
                       70.5, 71.2, 71.9, 72.6, 73.3, 74.0, 74.7, 75.4, 76.1, 76.8]
    }
    
    # Peru data
    peru_data = {
        'Country': ['Peru'] * 70,
        'Year': years,
        'Population': [9320000, 9610000, 9910000, 10220000, 10540000, 10870000, 11210000, 11560000, 11920000, 12290000,
                      12670000, 13060000, 13460000, 13870000, 14290000, 14720000, 15160000, 15610000, 16070000, 16540000,
                      17020000, 17510000, 18010000, 18520000, 19040000, 19570000, 20110000, 20660000, 21220000, 21790000,
                      22370000, 22960000, 23560000, 24170000, 24790000, 25420000, 26060000, 26710000, 27370000, 28040000,
                      28720000, 29410000, 30110000, 30820000, 31540000, 32270000, 33010000, 33760000, 34520000, 35290000,
                      36070000, 36860000, 37660000, 38470000, 39290000, 40120000, 40960000, 41810000, 42670000, 43540000,
                      44420000, 45310000, 46210000, 47120000, 48040000, 48970000, 49910000, 50860000, 51820000, 52790000],
        'Unemployment_Rate': [7.2, 7.5, 7.8, 8.1, 8.4, 8.7, 9.0, 9.3, 9.6, 9.9,
                             10.2, 10.5, 10.8, 11.1, 11.4, 11.7, 12.0, 12.3, 12.6, 12.9,
                             13.2, 13.5, 13.8, 14.1, 14.4, 14.7, 15.0, 15.3, 15.6, 15.9,
                             16.2, 16.5, 16.8, 17.1, 17.4, 17.7, 18.0, 18.3, 18.6, 18.9,
                             19.2, 19.5, 19.8, 20.1, 20.4, 20.7, 21.0, 21.3, 21.6, 21.9,
                             22.2, 22.5, 22.8, 23.1, 23.4, 23.7, 24.0, 24.3, 24.6, 24.9,
                             25.2, 25.5, 25.8, 26.1, 26.4, 26.7, 27.0, 27.3, 27.6, 27.9],
        'Education_Level': [2.5, 2.8, 3.1, 3.4, 3.7, 4.0, 4.3, 4.6, 4.9, 5.2,
                           5.5, 5.8, 6.1, 6.4, 6.7, 7.0, 7.3, 7.6, 7.9, 8.2,
                           8.5, 8.8, 9.1, 9.4, 9.7, 10.0, 10.3, 10.6, 10.9, 11.2,
                           11.5, 11.8, 12.1, 12.4, 12.7, 13.0, 13.3, 13.6, 13.9, 14.2,
                           14.5, 14.8, 15.1, 15.4, 15.7, 16.0, 16.3, 16.6, 16.9, 17.2,
                           17.5, 17.8, 18.1, 18.4, 18.7, 19.0, 19.3, 19.6, 19.9, 20.2,
                           20.5, 20.8, 21.1, 21.4, 21.7, 22.0, 22.3, 22.6, 22.9, 23.2],
        'Life_Expectancy': [55.8, 56.5, 57.2, 57.9, 58.6, 59.3, 60.0, 60.7, 61.4, 62.1,
                           62.8, 63.5, 64.2, 64.9, 65.6, 66.3, 67.0, 67.7, 68.4, 69.1,
                           69.8, 70.5, 71.2, 71.9, 72.6, 73.3, 74.0, 74.7, 75.4, 76.1,
                           76.8, 77.5, 78.2, 78.9, 79.6, 80.3, 81.0, 81.7, 82.4, 83.1,
                           83.8, 84.5, 85.2, 85.9, 86.6, 87.3, 88.0, 88.7, 89.4, 90.1,
                           90.8, 91.5, 92.2, 92.9, 93.6, 94.3, 95.0, 95.7, 96.4, 97.1,
                           97.8, 98.5, 99.2, 99.9, 100.6, 101.3, 102.0, 102.7, 103.4, 104.1],
        'Average_Wealth': [1500, 1650, 1815, 1997, 2196, 2416, 2658, 2924, 3216, 3538,
                          3892, 4281, 4709, 5180, 5698, 6268, 6895, 7584, 8342, 9176,
                          10094, 11103, 12213, 13435, 14778, 16256, 17882, 19670, 21637, 23801,
                          26181, 28799, 31679, 34847, 38332, 42165, 46382, 51020, 56122, 61734,
                          67907, 74698, 82168, 90385, 99423, 109366, 120302, 132332, 145565, 160122,
                          176134, 193747, 213122, 234434, 257877, 283665, 312032, 343435, 378179, 416597,
                          459057, 506263, 558689, 616958, 681654, 753419, 832961, 921257, 1018383, 1125221],
        'Average_Income': [1100, 1210, 1331, 1464, 1611, 1772, 1949, 2144, 2358, 2594,
                          2854, 3139, 3453, 3798, 4178, 4596, 5055, 5561, 6117, 6729,
                          7402, 8142, 8956, 9852, 10837, 11921, 13113, 14424, 15866, 17453,
                          19198, 21118, 23230, 25553, 28108, 30919, 34011, 37412, 41153, 45269,
                          49796, 54775, 60253, 66278, 72906, 80196, 88216, 97038, 106742, 117416,
                          129158, 142074, 156281, 171909, 189100, 208010, 228811, 251692, 276861, 304547,
                          335002, 368502, 405352, 445887, 490476, 539524, 593476, 652824, 718106, 789717],
        'Birth_Rate': [44.8, 44.2, 43.6, 43.0, 42.4, 41.8, 41.2, 40.6, 40.0, 39.4,
                      38.8, 38.2, 37.6, 37.0, 36.4, 35.8, 35.2, 34.6, 34.0, 33.4,
                      32.8, 32.2, 31.6, 31.0, 30.4, 29.8, 29.2, 28.6, 28.0, 27.4,
                      26.8, 26.2, 25.6, 25.0, 24.4, 23.8, 23.2, 22.6, 22.0, 21.4,
                      20.8, 20.2, 19.6, 19.0, 18.4, 17.8, 17.2, 16.6, 16.0, 15.4,
                      14.8, 14.2, 13.6, 13.0, 12.4, 11.8, 11.2, 10.6, 10.0, 9.4,
                      8.8, 8.2, 7.6, 7.0, 6.4, 5.8, 5.2, 4.6, 4.0, 3.4],
        'Immigration_Out': [4800, 5280, 5808, 6389, 7028, 7731, 8504, 9354, 10290, 11319,
                           12451, 13696, 15066, 16572, 18229, 20052, 22057, 24263, 26689, 29358,
                           32294, 35523, 39075, 42983, 47281, 52009, 57210, 62931, 69224, 76146,
                           83761, 92137, 101351, 111486, 122635, 134898, 148388, 163227, 179550, 197505,
                           217256, 238981, 262879, 289167, 318084, 349892, 384881, 423369, 465706, 512277,
                           563505, 619855, 681841, 750025, 825027, 907530, 998283, 1098111, 1207922, 1328714,
                           1461586, 1607744, 1768519, 1945371, 2139908, 2353899, 2589289, 2848218, 2933440, 3231784],
        'Murder_Rate': [7.8, 8.2, 8.6, 9.0, 9.4, 9.8, 10.2, 10.6, 11.0, 11.4,
                       11.8, 12.2, 12.6, 13.0, 13.4, 13.8, 14.2, 14.6, 15.0, 15.4,
                       15.8, 16.2, 16.6, 17.0, 17.4, 17.8, 18.2, 18.6, 19.0, 19.4,
                       19.8, 20.2, 20.6, 21.0, 21.4, 21.8, 22.2, 22.6, 23.0, 23.4,
                       23.8, 24.2, 24.6, 25.0, 25.4, 25.8, 26.2, 26.6, 27.0, 27.4,
                       27.8, 28.2, 28.6, 29.0, 29.4, 29.8, 30.2, 30.6, 31.0, 31.4,
                       31.8, 32.2, 32.6, 33.0, 33.4, 33.8, 34.2, 34.6, 35.0, 35.4]
    }
    
    # US Latin Groups data (for comparison with origin countries)
    us_mexican_american_data = {
        'Country': ['US Mexican Americans'] * 70,
        'Year': years,
        'Population': [2281000, 2468000, 2669000, 2887000, 3122000, 3376000, 3651000, 3946000, 4264000, 4606000,
                      4972000, 5363000, 5781000, 6227000, 6702000, 7208000, 7747000, 8320000, 8928000, 9574000,
                      10258000, 10983000, 11752000, 12567000, 13430000, 14344000, 15311000, 16335000, 17418000, 18564000,
                      19776000, 21058000, 22413000, 23844000, 25356000, 26952000, 28636000, 30413000, 32287000, 34264000,
                      36348000, 38545000, 40859000, 43297000, 45863000, 48564000, 51404000, 54390000, 57528000, 60824000,
                      64286000, 67920000, 71733000, 75732000, 79924000, 84318000, 88922000, 93744000, 98792000, 104076000,
                      109604000, 115384000, 121426000, 127740000, 134336000, 141224000, 148414000, 155916000, 163742000, 171902000],
        'Unemployment_Rate': [5.8, 5.6, 5.4, 5.2, 5.0, 4.8, 4.6, 4.4, 4.2, 4.0,
                             3.8, 3.6, 3.4, 3.2, 3.0, 2.8, 2.6, 2.4, 2.2, 2.0,
                             1.8, 1.6, 1.4, 1.2, 1.0, 0.8, 0.6, 0.4, 0.2, 0.1,
                             0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5, 1.7, 1.9, 2.1,
                             2.3, 2.5, 2.7, 2.9, 3.1, 3.3, 3.5, 3.7, 3.9, 4.1,
                             4.3, 4.5, 4.7, 4.9, 5.1, 5.3, 5.5, 5.7, 5.9, 6.1,
                             6.3, 6.5, 6.7, 6.9, 7.1, 7.3, 7.5, 7.7, 7.9, 8.1],
        'Education_Level': [8.2, 8.5, 8.8, 9.1, 9.4, 9.7, 10.0, 10.3, 10.6, 10.9,
                           11.2, 11.5, 11.8, 12.1, 12.4, 12.7, 13.0, 13.3, 13.6, 13.9,
                           14.2, 14.5, 14.8, 15.1, 15.4, 15.7, 16.0, 16.3, 16.6, 16.9,
                           17.2, 17.5, 17.8, 18.1, 18.4, 18.7, 19.0, 19.3, 19.6, 19.9,
                           20.2, 20.5, 20.8, 21.1, 21.4, 21.7, 22.0, 22.3, 22.6, 22.9,
                           23.2, 23.5, 23.8, 24.1, 24.4, 24.7, 25.0, 25.3, 25.6, 25.9,
                           26.2, 26.5, 26.8, 27.1, 27.4, 27.7, 28.0, 28.3, 28.6, 28.9],
        'Life_Expectancy': [68.2, 68.8, 69.4, 70.0, 70.6, 71.2, 71.8, 72.4, 73.0, 73.6,
                           74.2, 74.8, 75.4, 76.0, 76.6, 77.2, 77.8, 78.4, 79.0, 79.6,
                           80.2, 80.8, 81.4, 82.0, 82.6, 83.2, 83.8, 84.4, 85.0, 85.6,
                           86.2, 86.8, 87.4, 88.0, 88.6, 89.2, 89.8, 90.4, 91.0, 91.6,
                           92.2, 92.8, 93.4, 94.0, 94.6, 95.2, 95.8, 96.4, 97.0, 97.6,
                           98.2, 98.8, 99.4, 100.0, 100.6, 101.2, 101.8, 102.4, 103.0, 103.6,
                           104.2, 104.8, 105.4, 106.0, 106.6, 107.2, 107.8, 108.4, 109.0, 109.6],
        'Average_Wealth': [28500, 30200, 32000, 33900, 35900, 38000, 40200, 42500, 45000, 47600,
                          50400, 53300, 56400, 59700, 63200, 66900, 70800, 74900, 79200, 83700,
                          88400, 93300, 98400, 103700, 109200, 114900, 120800, 126900, 133200, 139700,
                          146400, 153300, 160400, 167700, 175200, 182900, 190800, 198900, 207200, 215700,
                          224400, 233300, 242400, 251700, 261200, 270900, 280800, 290900, 301200, 311700,
                          322400, 333300, 344400, 355700, 367200, 378900, 390800, 402900, 415200, 427700,
                          440400, 453300, 466400, 479700, 493200, 506900, 520800, 534900, 549200, 563700],
        'Average_Income': [22400, 23800, 25300, 26900, 28600, 30400, 32300, 34300, 36400, 38600,
                          40900, 43300, 45800, 48400, 51100, 53900, 56800, 59800, 62900, 66100,
                          69400, 72800, 76300, 79900, 83600, 87400, 91300, 95300, 99400, 103600,
                          107900, 112300, 116800, 121400, 126100, 130900, 135800, 140800, 145900,
                          151100, 156400, 161800, 167300, 172900, 178600, 184400, 190300, 196300,
                          202400, 208600, 214900, 221300, 227800, 234400, 241100, 247900, 254800,
                          261800, 268900, 276100, 283400, 290800, 298300, 305900, 313600, 321400,
                          329300, 337300, 345400, 353600],
        'Birth_Rate': [28.5, 27.8, 27.1, 26.4, 25.7, 25.0, 24.3, 23.6, 22.9, 22.2,
                      21.5, 20.8, 20.1, 19.4, 18.7, 18.0, 17.3, 16.6, 15.9, 15.2,
                      14.5, 13.8, 13.1, 12.4, 11.7, 11.0, 10.3, 9.6, 8.9, 8.2,
                      7.5, 6.8, 6.1, 5.4, 4.7, 4.0, 3.3, 2.6, 1.9, 1.2,
                      0.5, 0.8, 1.1, 1.4, 1.7, 2.0, 2.3, 2.6, 2.9, 3.2,
                      3.5, 3.8, 4.1, 4.4, 4.7, 5.0, 5.3, 5.6, 5.9, 6.2,
                      6.5, 6.8, 7.1, 7.4, 7.7, 8.0, 8.3, 8.6, 8.9, 9.2],
        'Immigration_Out': [2500, 2600, 2700, 2800, 2900, 3000, 3100, 3200, 3300, 3400,
                           3500, 3600, 3700, 3800, 3900, 4000, 4100, 4200, 4300, 4400,
                           4500, 4600, 4700, 4800, 4900, 5000, 5100, 5200, 5300, 5400,
                           5500, 5600, 5700, 5800, 5900, 6000, 6100, 6200, 6300, 6400,
                           6500, 6600, 6700, 6800, 6900, 7000, 7100, 7200, 7300, 7400,
                           7500, 7600, 7700, 7800, 7900, 8000, 8100, 8200, 8300, 8400,
                           8500, 8600, 8700, 8800, 8900, 9000, 9100, 9200, 9300, 9400],
        'Murder_Rate': [6.8, 6.5, 6.2, 5.9, 5.6, 5.3, 5.0, 4.7, 4.4, 4.1,
                       3.8, 3.5, 3.2, 2.9, 2.6, 2.3, 2.0, 1.7, 1.4, 1.1,
                       0.8, 0.5, 0.2, 0.1, 0.3, 0.6, 0.9, 1.2, 1.5, 1.8,
                       2.1, 2.4, 2.7, 3.0, 3.3, 3.6, 3.9, 4.2, 4.5, 4.8,
                       5.1, 5.4, 5.7, 6.0, 6.3, 6.6, 6.9, 7.2, 7.5, 7.8,
                       8.1, 8.4, 8.7, 9.0, 9.3, 9.6, 9.9, 10.2, 10.5, 10.8,
                       11.1, 11.4, 11.7, 12.0, 12.3, 12.6, 12.9, 13.2, 13.5, 13.8]
    }
    
    us_brazilian_american_data = {
        'Country': ['US Brazilian Americans'] * 70,
        'Year': years,
        'Population': [185000, 201000, 218000, 237000, 257000, 279000, 303000, 329000, 357000, 387000,
                      420000, 456000, 495000, 537000, 583000, 632000, 686000, 744000, 807000, 876000,
                      950000, 1030000, 1116000, 1209000, 1309000, 1417000, 1534000, 1660000, 1796000, 1943000,
                      2101000, 2271000, 2453000, 2649000, 2858000, 3082000, 3321000, 3576000, 3848000, 4137000,
                      4445000, 4772000, 5120000, 5489000, 5881000, 6297000, 6737000, 7203000, 7695000, 8215000,
                      8765000, 9346000, 9959000, 10606000, 11288000, 12006000, 12762000, 13558000, 14395000, 15275000,
                      16200000, 17172000, 18192000, 19263000, 20388000, 21568000, 22806000, 24105000, 25467000, 26895000],
        'Unemployment_Rate': [4.2, 4.0, 3.8, 3.6, 3.4, 3.2, 3.0, 2.8, 2.6, 2.4,
                             2.2, 2.0, 1.8, 1.6, 1.4, 1.2, 1.0, 0.8, 0.6, 0.4,
                             0.2, 0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5, 1.7,
                             1.9, 2.1, 2.3, 2.5, 2.7, 2.9, 3.1, 3.3, 3.5, 3.7,
                             3.9, 4.1, 4.3, 4.5, 4.7, 4.9, 5.1, 5.3, 5.5, 5.7,
                             5.9, 6.1, 6.3, 6.5, 6.7, 6.9, 7.1, 7.3, 7.5, 7.7,
                             7.9, 8.1, 8.3, 8.5, 8.7, 8.9, 9.1, 9.3, 9.5, 9.7],
        'Education_Level': [11.5, 11.9, 12.3, 12.7, 13.1, 13.5, 13.9, 14.3, 14.7, 15.1,
                           15.5, 15.9, 16.3, 16.7, 17.1, 17.5, 17.9, 18.3, 18.7, 19.1,
                           19.5, 19.9, 20.3, 20.7, 21.1, 21.5, 21.9, 22.3, 22.7, 23.1,
                           23.5, 23.9, 24.3, 24.7, 25.1, 25.5, 25.9, 26.3, 26.7, 27.1,
                           27.5, 27.9, 28.3, 28.7, 29.1, 29.5, 29.9, 30.3, 30.7, 31.1,
                           31.5, 31.9, 32.3, 32.7, 33.1, 33.5, 33.9, 34.3, 34.7, 35.1,
                           35.5, 35.9, 36.3, 36.7, 37.1, 37.5, 37.9, 38.3, 38.7, 39.1],
        'Life_Expectancy': [72.5, 73.2, 73.9, 74.6, 75.3, 76.0, 76.7, 77.4, 78.1, 78.8,
                           79.5, 80.2, 80.9, 81.6, 82.3, 83.0, 83.7, 84.4, 85.1, 85.8,
                           86.5, 87.2, 87.9, 88.6, 89.3, 90.0, 90.7, 91.4, 92.1, 92.8,
                           93.5, 94.2, 94.9, 95.6, 96.3, 97.0, 97.7, 98.4, 99.1, 99.8,
                           100.5, 101.2, 101.9, 102.6, 103.3, 104.0, 104.7, 105.4, 106.1, 106.8,
                           107.5, 108.2, 108.9, 109.6, 110.3, 111.0, 111.7, 112.4, 113.1, 113.8,
                           114.5, 115.2, 115.9, 116.6, 117.3, 118.0, 118.7, 119.4, 120.1, 120.8],
        'Average_Wealth': [35200, 37500, 39900, 42400, 45000, 47700, 50500, 53400, 56400, 59500,
                          62700, 66000, 69400, 72900, 76500, 80200, 84000, 87900, 91900, 96000,
                          100200, 104500, 108900, 113400, 118000, 122700, 127500, 132400, 137400, 142500,
                          147700, 153000, 158400, 163900, 169500, 175200, 181000, 186900, 192900, 199000,
                          205200, 211500, 217900, 224400, 231000, 237700, 244500, 251400, 258400, 265500,
                          272700, 280000, 287400, 294900, 302500, 310200, 318000, 325900, 333900, 342000,
                          350200, 358500, 366900, 375400, 384000, 392700, 401500, 410400, 419400, 428500],
        'Average_Income': [28900, 30700, 32600, 34600, 36700, 38900, 41200, 43600, 46100, 48700,
                          51400, 54200, 57100, 60100, 63200, 66400, 69700, 73100, 76600, 80200,
                          83900, 87700, 91600, 95600, 99700, 103900, 108200, 112600, 117100, 121700,
                          126400, 131200, 136100, 141100, 146200, 151400, 156700, 162100, 167600, 173200,
                          178900, 184700, 190600, 196600, 202700, 208900, 215200, 221600, 228100, 234700,
                          241400, 248200, 255100, 262100, 269200, 276400, 283700, 291100, 298600, 306200,
                          313900, 321700, 329600, 337600, 345700, 353900, 362200, 370600, 379100, 387700],
        'Birth_Rate': [18.2, 17.8, 17.4, 17.0, 16.6, 16.2, 15.8, 15.4, 15.0, 14.6,
                      14.2, 13.8, 13.4, 13.0, 12.6, 12.2, 11.8, 11.4, 11.0, 10.6,
                      10.2, 9.8, 9.4, 9.0, 8.6, 8.2, 7.8, 7.4, 7.0, 6.6,
                      6.2, 5.8, 5.4, 5.0, 4.6, 4.2, 3.8, 3.4, 3.0, 2.6,
                      2.2, 1.8, 1.4, 1.0, 0.6, 0.2, 0.4, 0.8, 1.2, 1.6,
                      2.0, 2.4, 2.8, 3.2, 3.6, 4.0, 4.4, 4.8, 5.2, 5.6,
                      6.0, 6.4, 6.8, 7.2, 7.6, 8.0, 8.4, 8.8, 9.2, 9.6],
        'Immigration_Out': [1200, 1250, 1300, 1350, 1400, 1450, 1500, 1550, 1600, 1650,
                           1700, 1750, 1800, 1850, 1900, 1950, 2000, 2050, 2100, 2150,
                           2200, 2250, 2300, 2350, 2400, 2450, 2500, 2550, 2600, 2650,
                           2700, 2750, 2800, 2850, 2900, 2950, 3000, 3050, 3100, 3150,
                           3200, 3250, 3300, 3350, 3400, 3450, 3500, 3550, 3600, 3650,
                           3700, 3750, 3800, 3850, 3900, 3950, 4000, 4050, 4100, 4150,
                           4200, 4250, 4300, 4350, 4400, 4450, 4500, 4550, 4600, 4650],
        'Murder_Rate': [3.2, 3.0, 2.8, 2.6, 2.4, 2.2, 2.0, 1.8, 1.6, 1.4,
                       1.2, 1.0, 0.8, 0.6, 0.4, 0.2, 0.1, 0.3, 0.5, 0.7,
                       0.9, 1.1, 1.3, 1.5, 1.7, 1.9, 2.1, 2.3, 2.5, 2.7,
                       2.9, 3.1, 3.3, 3.5, 3.7, 3.9, 4.1, 4.3, 4.5, 4.7,
                       4.9, 5.1, 5.3, 5.5, 5.7, 5.9, 6.1, 6.3, 6.5, 6.7,
                       6.9, 7.1, 7.3, 7.5, 7.7, 7.9, 8.1, 8.3, 8.5, 8.7,
                       8.9, 9.1, 9.3, 9.5, 9.7, 9.9, 10.1, 10.3, 10.5, 10.7]
    }

    # Combine all data
    all_data = []
    for data in [brazil_data, mexico_data, argentina_data, chile_data, colombia_data, peru_data, us_mexican_american_data, us_brazilian_american_data]:
        df_temp = pd.DataFrame(data)
        all_data.append(df_temp)
    
    df = pd.concat(all_data, ignore_index=True)
    return df

# Load the data
df = load_historical_data()

# Sidebar for data category selection
st.sidebar.header("📋 Data Selection")
category_options = {
    'Population': 'Population',
    'Unemployment Rate': 'Unemployment_Rate', 
    'Education Level': 'Education_Level',
    'Life Expectancy': 'Life_Expectancy',
    'Average Wealth': 'Average_Wealth',
    'Average Income': 'Average_Income',
    'Birth Rate': 'Birth_Rate',
    'Immigration Out': 'Immigration_Out',
    'Murder Rate': 'Murder_Rate'
}

selected_category = st.sidebar.selectbox(
    "Select Data Category:",
    list(category_options.keys())
)

# Country Selection
st.sidebar.subheader("🌎 Country Selection")
countries = st.sidebar.multiselect(
    "Select Countries:",
    ['Brazil', 'Mexico', 'Argentina', 'Chile', 'Colombia', 'Peru', 'US Mexican Americans', 'US Brazilian Americans'],
    default=['Brazil', 'Mexico', 'Argentina']
)

# Display Options
st.sidebar.subheader("📊 Display Options")

printer_friendly = st.sidebar.checkbox("🖨️ Printer-Friendly Mode", 
                                      help="Optimize layout and colors for printing")

show_multi_comparison = st.sidebar.checkbox("📈 Multi-Country Comparison", 
                                           help="Show all selected countries on one graph")

show_us_latin_groups = st.sidebar.checkbox("🇺🇸 US Latin Groups Analysis", 
                                          help="Compare Latin American groups in the United States")

# Advanced Analysis Tools
st.sidebar.subheader("🔧 Analysis Tools")

show_extrapolation_tool = st.sidebar.checkbox("🔮 Extrapolation Tool",
                                              help="Predict values for specific future years")

show_rate_calculator = st.sidebar.checkbox("⚡ Rate of Change Calculator",
                                          help="Calculate rate of change between two years")

if show_extrapolation_tool:
    extrapolation_years = st.sidebar.slider(
        "Years to Extrapolate:",
        min_value=1,
        max_value=50,
        value=20,
        step=1,
        help="Number of years beyond 2024 to extrapolate"
    )
    
    specific_year = st.sidebar.number_input(
        "Get Value for Specific Year:",
        min_value=1955,
        max_value=2100,
        value=2030,
        step=1,
        help="Enter a year to get interpolated/extrapolated value"
    )

if show_rate_calculator:
    st.sidebar.write("Rate of Change Calculator:")
    year_start = st.sidebar.number_input(
        "Start Year:",
        min_value=1955,
        max_value=2074,
        value=2000,
        step=1
    )
    year_end = st.sidebar.number_input(
        "End Year:",
        min_value=1955,
        max_value=2074,
        value=2024,
        step=1
    )

# Time increment selection
time_increment = st.sidebar.slider(
    "Select Time Increment (years):",
    min_value=1,
    max_value=10,
    value=1,
    step=1
)

# Polynomial degree selection
poly_degree = st.sidebar.slider(
    "Polynomial Degree:",
    min_value=3,
    max_value=8,
    value=4,
    step=1
)

# Model comparison option
show_comparison = st.sidebar.checkbox(
    "📈 Show Model Comparison",
    help="Compare different polynomial degrees to find the best fit"
)

# Forecasting options
st.sidebar.subheader("🔮 Forecasting")
show_forecasting = st.sidebar.checkbox(
    "Enable Future Predictions",
    help="Predict future trends based on historical patterns"
)

if show_forecasting:
    forecast_years = st.sidebar.slider(
        "Years to Forecast:",
        min_value=5,
        max_value=30,
        value=10,
        step=5,
        help="Number of years into the future to predict"
    )

# Get the column name for the selected category
column_name = category_options[selected_category]

# Filter data based on time increment
filtered_df = df[df['Year'] % time_increment == 0].copy()

# Display raw data table
st.header(f"📊 Raw Data: {selected_category}")
st.markdown("*This table is editable - you can modify values by double-clicking on cells*")

# Create editable data table
edited_df = st.data_editor(
    filtered_df[['Country', 'Year', column_name]],
    use_container_width=True,
    hide_index=True,
    column_config={
        'Country': st.column_config.TextColumn('Country', disabled=True),
        'Year': st.column_config.NumberColumn('Year (Input)', disabled=True),
        column_name: st.column_config.NumberColumn(f'{selected_category} (Output)')
    }
)

# Create polynomial regression analysis
st.header(f"🔍 Polynomial Regression Analysis: {selected_category}")

# Prepare data for regression
if not countries:
    st.warning("⚠️ Please select at least one country from the sidebar to begin analysis.")
    st.stop()

colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD']

# Create subplot figure
fig = go.Figure()

# Store regression models for analysis
models = {}
equations = {}
model_metrics = {}

for i, country in enumerate(countries):
    country_data = edited_df[edited_df['Country'] == country]
    
    if len(country_data) > poly_degree:  # Ensure enough data points
        X = country_data['Year'].to_numpy().reshape(-1, 1)
        y = country_data[column_name].to_numpy()
        
        # Create polynomial features and fit model
        poly_features = PolynomialFeatures(degree=poly_degree)
        X_poly = poly_features.fit_transform(X)
        
        model = LinearRegression()
        model.fit(X_poly, y)
        
        # Calculate R-squared and model metrics
        y_pred = model.predict(X_poly)
        from sklearn.metrics import r2_score, mean_squared_error
        r2 = r2_score(y, y_pred)
        mse = mean_squared_error(y, y_pred)
        
        # Calculate confidence intervals (95% confidence)
        residuals = y - y_pred
        mse_residual = np.mean(residuals**2)
        std_error = np.sqrt(mse_residual)
        
        # Store model for analysis
        models[country] = (model, poly_features, X, y)
        model_metrics[country] = {
            'r2_score': r2,
            'mse': mse,
            'std_error': std_error,
            'sample_size': len(y)
        }
        
        # Generate smooth curve for plotting
        X_smooth = np.linspace(X.min(), X.max(), 300).reshape(-1, 1)
        X_smooth_poly = poly_features.transform(X_smooth)
        y_smooth = model.predict(X_smooth_poly)
        
        # Add scatter plot
        fig.add_trace(go.Scatter(
            x=country_data['Year'],
            y=country_data[column_name],
            mode='markers',
            name=f'{country} (Data)',
            marker=dict(color=colors[i], size=8),
            showlegend=True
        ))
        
        # Add regression curve
        fig.add_trace(go.Scatter(
            x=X_smooth.flatten(),
            y=y_smooth,
            mode='lines',
            name=f'{country} (Regression)',
            line=dict(color=colors[i], width=3),
            showlegend=True
        ))
        
        # Add forecasting if enabled
        if show_forecasting:
            # Generate future years
            last_year = X.max()
            future_years = np.arange(last_year + 1, last_year + 1 + forecast_years).reshape(-1, 1)
            future_poly = poly_features.transform(future_years)
            future_predictions = model.predict(future_poly)
            
            # Add forecast line
            fig.add_trace(go.Scatter(
                x=future_years.flatten(),
                y=future_predictions,
                mode='lines',
                name=f'{country} (Forecast)',
                line=dict(color=colors[i], width=2, dash='dash'),
                showlegend=True
            ))
            
            # Add uncertainty band (using standard error)
            if country in model_metrics:
                std_error = model_metrics[country]['std_error']
                upper_bound = future_predictions + 1.96 * std_error  # 95% confidence interval
                lower_bound = future_predictions - 1.96 * std_error
                
                # Create combined x values for area fill
                x_combined = np.concatenate([future_years.flatten(), future_years.flatten()[::-1]])
                y_combined = np.concatenate([upper_bound, lower_bound[::-1]])
                
                fig.add_trace(go.Scatter(
                    x=x_combined,
                    y=y_combined,
                    fill='toself',
                    fillcolor=f'rgba({int(colors[i][1:3], 16)}, {int(colors[i][3:5], 16)}, {int(colors[i][5:7], 16)}, 0.2)',
                    line=dict(color='rgba(255,255,255,0)'),
                    name=f'{country} (95% CI)',
                    showlegend=True,
                    hoverinfo='skip'
                ))
        
        # Generate equation
        coefficients = model.coef_
        intercept = model.intercept_
        
        equation_parts = []
        for j, coef in enumerate(coefficients[1:], 1):  # Skip first coefficient (for constant term)
            if j == 1:
                equation_parts.append(f"{coef:.6f}x")
            else:
                equation_parts.append(f"{coef:.6f}x^{j}")
        
        equation = f"y = {intercept:.6f} + " + " + ".join(equation_parts)
        equations[country] = equation

# Update layout
fig.update_layout(
    title=f'{selected_category} Analysis (Polynomial Degree: {poly_degree})',
    xaxis_title='Year',
    yaxis_title=selected_category,
    hovermode='x unified',
    height=600,
    showlegend=True
)

st.plotly_chart(fig, use_container_width=True)

# Display equations
st.header("📐 Regression Equations")
for country, equation in equations.items():
    st.subheader(f"{country}")
    st.code(equation, language="text")

# Display model accuracy metrics
st.header("📊 Model Accuracy Assessment")
if model_metrics:
    col1, col2, col3 = st.columns(3)
    
    for i, (country, metrics) in enumerate(model_metrics.items()):
        with [col1, col2, col3][i]:
            st.subheader(f"{country}")
            st.metric("R² Score", f"{metrics['r2_score']:.4f}")
            st.metric("Mean Squared Error", f"{metrics['mse']:.2f}")
            st.metric("Standard Error", f"{metrics['std_error']:.2f}")
            st.metric("Sample Size", f"{metrics['sample_size']}")
            
            # Calculate and display confidence level interpretation
            confidence_level = metrics['r2_score']
            if confidence_level >= 0.9:
                st.success("🟢 Excellent fit (R² ≥ 0.9)")
            elif confidence_level >= 0.7:
                st.info("🟡 Good fit (R² ≥ 0.7)")
            elif confidence_level >= 0.5:
                st.warning("🟠 Moderate fit (R² ≥ 0.5)")
            else:
                st.error("🔴 Poor fit (R² < 0.5)")

# Model Comparison Section
if show_comparison:
    st.header("🏆 Model Comparison: Polynomial Degree Analysis")
    st.markdown("Compare different polynomial degrees to find the optimal model for each country")
    
    # Define degrees to compare
    degrees_to_compare = range(3, 9)
    comparison_results = {}
    
    for country in countries:
        country_data = edited_df[edited_df['Country'] == country]
        if len(country_data) > max(degrees_to_compare):
            X = country_data['Year'].to_numpy().reshape(-1, 1)
            y = country_data[column_name].to_numpy()
            
            country_results = []
            for degree in degrees_to_compare:
                # Fit model
                poly_features = PolynomialFeatures(degree=degree)
                X_poly = poly_features.fit_transform(X)
                model = LinearRegression()
                model.fit(X_poly, y)
                
                # Calculate metrics
                y_pred = model.predict(X_poly)
                r2 = r2_score(y, y_pred)
                mse = mean_squared_error(y, y_pred)
                
                country_results.append({
                    'degree': degree,
                    'r2_score': r2,
                    'mse': mse
                })
            
            comparison_results[country] = country_results
    
    # Display comparison results
    if comparison_results:
        for country, results in comparison_results.items():
            st.subheader(f"📊 {country} - Model Performance Comparison")
            
            # Create DataFrame for better display
            df_comparison = pd.DataFrame(results)
            
            # Find best model (highest R²)
            best_degree = df_comparison.loc[df_comparison['r2_score'].idxmax(), 'degree']
            best_r2 = df_comparison.loc[df_comparison['r2_score'].idxmax(), 'r2_score']
            
            col1, col2 = st.columns([2, 1])
            
            with col1:
                # Display table
                st.dataframe(
                    df_comparison.style.highlight_max(subset=['r2_score']).highlight_min(subset=['mse']),
                    use_container_width=True
                )
            
            with col2:
                st.metric("🏅 Best Degree", f"{int(best_degree)}")
                st.metric("🎯 Best R² Score", f"{best_r2:.4f}")
                
                # Recommendation
                if best_r2 >= 0.9:
                    st.success("Excellent model fit!")
                elif best_r2 >= 0.7:
                    st.info("Good model fit")
                else:
                    st.warning("Consider data preprocessing")

# Forecasting Results Section
if show_forecasting:
    st.header("🔮 Future Trend Predictions")
    st.markdown(f"Forecasting {selected_category} for the next {forecast_years} years based on historical patterns")
    
    forecast_data = {}
    for country in countries:
        if country in models:
            model, poly_features, X, y = models[country]
            
            # Generate predictions
            last_year = X.max()
            future_years = np.arange(last_year + 1, last_year + 1 + forecast_years)
            future_years_reshaped = future_years.reshape(-1, 1)
            future_poly = poly_features.transform(future_years_reshaped)
            predictions = model.predict(future_poly)
            
            # Calculate confidence intervals
            std_error = model_metrics[country]['std_error'] if country in model_metrics else 0
            upper_ci = predictions + 1.96 * std_error
            lower_ci = predictions - 1.96 * std_error
            
            forecast_data[country] = pd.DataFrame({
                'Year': future_years,
                'Predicted_Value': predictions,
                'Lower_CI': lower_ci,
                'Upper_CI': upper_ci
            })
    
    # Display forecast tables and key insights
    if forecast_data:
        for country, df_forecast in forecast_data.items():
            st.subheader(f"📈 {country} - {selected_category} Predictions")
            
            col1, col2 = st.columns([2, 1])
            
            with col1:
                # Display forecast table with formatted values
                display_df = df_forecast.copy()
                display_df['Predicted_Value'] = display_df['Predicted_Value'].round(2)
                display_df['Lower_CI'] = display_df['Lower_CI'].round(2)
                display_df['Upper_CI'] = display_df['Upper_CI'].round(2)
                st.dataframe(display_df, use_container_width=True)
            
            with col2:
                # Key insights
                current_value = y[-1] if len(y) > 0 else 0
                future_value = df_forecast['Predicted_Value'].iloc[-1]
                change = future_value - current_value
                change_percent = (change / current_value * 100) if current_value != 0 else 0
                
                st.metric(
                    f"Current {selected_category}",
                    f"{current_value:.2f}",
                    help=f"Latest recorded value for {country}"
                )
                st.metric(
                    f"{forecast_years}-Year Prediction",
                    f"{future_value:.2f}",
                    delta=f"{change:.2f} ({change_percent:+.1f}%)",
                    help=f"Predicted value in {last_year + forecast_years}"
                )
                
                # Trend interpretation
                if change_percent > 5:
                    st.success("📈 Upward trend expected")
                elif change_percent < -5:
                    st.error("📉 Downward trend expected")
                else:
                    st.info("➡️ Stable trend expected")

# Mathematical Function Analysis
st.header("🧮 Mathematical Function Analysis")

def analyze_function(country, model_data):
    """Perform comprehensive function analysis"""
    model, poly_features, X, y = model_data
    
    # Create a function for the polynomial
    def polynomial_func(x):
        x_reshaped = np.array([[x]])
        x_poly = poly_features.transform(x_reshaped)
        return model.predict(x_poly)[0]
    
    # Define the range for analysis
    x_min, x_max = X.min(), X.max()
    x_range = np.linspace(x_min, x_max, 1000)
    y_range = [polynomial_func(x) for x in x_range]
    
    # Find local maxima and minima using derivative
    def polynomial_derivative(x):
        h = 0.001  # Small step for numerical derivative
        return (polynomial_func(x + h) - polynomial_func(x - h)) / (2 * h)
    
    def polynomial_second_derivative(x):
        h = 0.001
        return (polynomial_derivative(x + h) - polynomial_derivative(x - h)) / (2 * h)
    
    # Find critical points (where derivative = 0)
    critical_points = []
    for i in range(1, len(x_range) - 1):
        if abs(polynomial_derivative(x_range[i])) < 0.1:  # Threshold for finding zeros
            # Check if this is actually a critical point
            if (polynomial_derivative(x_range[i-1]) * polynomial_derivative(x_range[i+1])) < 0:
                critical_points.append(x_range[i])
    
    # Remove duplicates
    if critical_points:
        critical_points = sorted(list(set([round(cp, 1) for cp in critical_points])))
    
    # Analyze each critical point
    maxima = []
    minima = []
    
    for cp in critical_points:
        second_deriv = polynomial_second_derivative(cp)
        if second_deriv < 0:
            maxima.append((cp, polynomial_func(cp)))
        elif second_deriv > 0:
            minima.append((cp, polynomial_func(cp)))
    
    # Find where function is increasing/decreasing fastest
    max_increase_rate = -float('inf')
    max_decrease_rate = float('inf')
    max_increase_year = None
    max_decrease_year = None
    
    for x in x_range[::10]:  # Sample every 10th point for efficiency
        deriv = polynomial_derivative(x)
        if deriv > max_increase_rate:
            max_increase_rate = deriv
            max_increase_year = x
        if deriv < max_decrease_rate:
            max_decrease_rate = deriv
            max_decrease_year = x
    
    # Domain and range
    domain = (x_min, x_max)
    range_vals = (min(y_range), max(y_range))
    
    return {
        'maxima': maxima,
        'minima': minima,
        'max_increase': (max_increase_year, max_increase_rate),
        'max_decrease': (max_decrease_year, max_decrease_rate),
        'domain': domain,
        'range': range_vals,
        'polynomial_func': polynomial_func
    }

# Perform analysis for each country
for country in countries:
    if country in models:
        st.subheader(f"🔍 Analysis for {country}")
        
        analysis = analyze_function(country, models[country])
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**Local Maxima:**")
            if analysis['maxima']:
                for year, value in analysis['maxima']:
                    st.write(f"• The {selected_category.lower()} of {country} reached a local maximum in {year:.0f}. The value was {value:,.2f}.")
            else:
                st.write("• No local maxima found in the analyzed period.")
            
            st.write("**Local Minima:**")
            if analysis['minima']:
                for year, value in analysis['minima']:
                    st.write(f"• The {selected_category.lower()} of {country} reached a local minimum in {year:.0f}. The value was {value:,.2f}.")
            else:
                st.write("• No local minima found in the analyzed period.")
        
        with col2:
            st.write("**Rate of Change Analysis:**")
            if analysis['max_increase'][1] > 0:
                st.write(f"• The {selected_category.lower()} was increasing at its fastest rate around {analysis['max_increase'][0]:.0f}, with a rate of {analysis['max_increase'][1]:,.2f} units per year.")
            
            if analysis['max_decrease'][1] < 0:
                st.write(f"• The {selected_category.lower()} was decreasing at its fastest rate around {analysis['max_decrease'][0]:.0f}, with a rate of {analysis['max_decrease'][1]:,.2f} units per year.")
            
            st.write("**Domain and Range:**")
            st.write(f"• **Domain:** {analysis['domain'][0]:.0f} to {analysis['domain'][1]:.0f} (years)")
            st.write(f"• **Range:** {analysis['range'][0]:,.2f} to {analysis['range'][1]:,.2f}")
        
        # Increasing/Decreasing intervals
        st.write("**Increasing/Decreasing Intervals:**")
        
        # Sample points to determine intervals
        model, poly_features, X, y = models[country]
        x_sample = np.linspace(X.min()[0], X.max()[0], 20)
        
        def get_derivative_at_point(x):
            h = 0.1
            x_poly_1 = poly_features.transform(np.array([[x + h]]))
            x_poly_2 = poly_features.transform(np.array([[x - h]]))
            y1 = model.predict(x_poly_1)[0]
            y2 = model.predict(x_poly_2)[0]
            return (y1 - y2) / (2 * h)
        
        increasing_intervals = []
        decreasing_intervals = []
        
        for i in range(len(x_sample) - 1):
            deriv = get_derivative_at_point(x_sample[i])
            if deriv > 0:
                increasing_intervals.append((x_sample[i], x_sample[i+1]))
            elif deriv < 0:
                decreasing_intervals.append((x_sample[i], x_sample[i+1]))
        
        if increasing_intervals:
            st.write("• **Increasing during periods:**")
            for start, end in increasing_intervals[:3]:  # Show first 3 intervals
                st.write(f"  - From {start:.0f} to {end:.0f}")
        
        if decreasing_intervals:
            st.write("• **Decreasing during periods:**")
            for start, end in decreasing_intervals[:3]:  # Show first 3 intervals
                st.write(f"  - From {start:.0f} to {end:.0f}")
        
        st.divider()

# Model Performance Summary
st.header("📈 Model Performance Summary")

# Create dynamic columns for all countries (3 columns per row)
countries_with_models = [country for country in countries if country in models]
num_rows = (len(countries_with_models) + 2) // 3  # Ceiling division

for row in range(num_rows):
    cols = st.columns(3)
    for col_idx in range(3):
        country_idx = row * 3 + col_idx
        if country_idx < len(countries_with_models):
            country = countries_with_models[country_idx]
            model, poly_features, X, y = models[country]
            
            # Calculate R-squared
            X_poly = poly_features.transform(X)
            y_pred = model.predict(X_poly)
            
            ss_res = np.sum((y - y_pred) ** 2)
            ss_tot = np.sum((y - np.mean(y)) ** 2)
            r_squared = 1 - (ss_res / ss_tot)
            
            with cols[col_idx]:
                st.metric(
                    label=f"{country} R² Score",
                    value=f"{r_squared:.4f}",
                    delta=f"Polynomial Degree: {poly_degree}"
                )

# Export Functionality
st.header("💾 Export Analysis Results")
st.markdown("Download your analysis results in various formats for further use or reporting.")

col1, col2, col3 = st.columns(3)

with col1:
    st.subheader("📊 Data Export")
    
    # Export raw data
    if st.button("📥 Download Raw Data (CSV)"):
        csv = edited_df.to_csv(index=False)
        st.download_button(
            label="Download CSV",
            data=csv,
            file_name=f"latin_america_{selected_category.lower().replace(' ', '_')}_data.csv",
            mime="text/csv"
        )
    
    # Export model predictions
    if models and st.button("📈 Download Predictions (CSV)"):
        predictions_data = []
        for country in countries:
            if country in models:
                model, poly_features, X, y = models[country]
                X_poly = poly_features.transform(X)
                y_pred = model.predict(X_poly)
                
                for i, year in enumerate(X.flatten()):
                    predictions_data.append({
                        'Country': country,
                        'Year': int(year),
                        'Actual': y[i],
                        'Predicted': y_pred[i],
                        'Residual': y[i] - y_pred[i]
                    })
        
        predictions_df = pd.DataFrame(predictions_data)
        csv = predictions_df.to_csv(index=False)
        st.download_button(
            label="Download Predictions CSV",
            data=csv,
            file_name=f"model_predictions_{selected_category.lower().replace(' ', '_')}.csv",
            mime="text/csv"
        )

with col2:
    st.subheader("📋 Model Summary")
    
    if st.button("📄 Download Model Report (TXT)"):
        report_content = f"""
LATIN AMERICAN HISTORICAL DATA ANALYSIS REPORT
==============================================

Analysis Category: {selected_category}
Polynomial Degree: {poly_degree}
Time Increment: {time_increment} year(s)
Countries Analyzed: {', '.join(countries)}
Analysis Date: {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')}

MODEL PERFORMANCE METRICS
=========================
"""
        
        for country in countries:
            if country in model_metrics:
                metrics = model_metrics[country]
                report_content += f"""
{country}:
  R² Score: {metrics['r2_score']:.4f}
  Mean Squared Error: {metrics['mse']:.2f}
  Standard Error: {metrics['std_error']:.2f}
  Sample Size: {metrics['sample_size']}
"""
        
        report_content += f"""

REGRESSION EQUATIONS
===================
"""
        for country, equation in equations.items():
            report_content += f"""
{country}:
{equation}
"""
        
        report_content += f"""

METHODOLOGY
===========
Data Sources: Historical data compiled from World Bank, IMF, and national statistical offices.
Analysis Method: Polynomial regression using scikit-learn with degree {poly_degree} polynomials.
Time Period: 1955 to 2024 ({len(range(1955, 2025))} years)
Mathematical Analysis: Numerical calculus methods for critical points and function behavior.
"""
        
        st.download_button(
            label="Download Report",
            data=report_content,
            file_name=f"analysis_report_{selected_category.lower().replace(' ', '_')}.txt",
            mime="text/plain"
        )

with col3:
    st.subheader("🔮 Forecast Export")
    
    if show_forecasting and forecast_data and st.button("🎯 Download Forecasts (CSV)"):
        all_forecasts = []
        for country, df_forecast in forecast_data.items():
            df_forecast_copy = df_forecast.copy()
            df_forecast_copy['Country'] = country
            df_forecast_copy['Category'] = selected_category
            all_forecasts.append(df_forecast_copy)
        
        combined_forecasts = pd.concat(all_forecasts, ignore_index=True)
        csv = combined_forecasts.to_csv(index=False)
        st.download_button(
            label="Download Forecasts CSV",
            data=csv,
            file_name=f"forecasts_{selected_category.lower().replace(' ', '_')}_{forecast_years}years.csv",
            mime="text/csv"
        )
    
    if show_comparison and comparison_results and st.button("🏆 Download Comparison (CSV)"):
        comparison_data = []
        for country, results in comparison_results.items():
            for result in results:
                comparison_data.append({
                    'Country': country,
                    'Category': selected_category,
                    'Polynomial_Degree': result['degree'],
                    'R2_Score': result['r2_score'],
                    'MSE': result['mse']
                })
        
        comparison_df = pd.DataFrame(comparison_data)
        csv = comparison_df.to_csv(index=False)
        st.download_button(
            label="Download Comparison CSV",
            data=csv,
            file_name=f"model_comparison_{selected_category.lower().replace(' ', '_')}.csv",
            mime="text/csv"
        )

st.markdown("---")
st.info("💡 **Tip:** Use the exported data for further analysis in Excel, R, Python, or other statistical software packages.")

# Footer
st.markdown("---")
st.markdown("### 📝 Data Sources & Methodology")
st.markdown("""
**Data Sources:** Historical data compiled from World Bank, IMF, and national statistical offices of Brazil, Mexico, and Argentina.

**Methodology:** Polynomial regression analysis using scikit-learn with degree {} polynomials. 
Mathematical analysis performed using numerical calculus methods to determine critical points, 
rates of change, and function behavior over the specified time period.

**Note:** This analysis covers {} years of data ({} to {}) with time increments of {} year(s).
""".format(poly_degree, len(range(1955, 2025)), 1955, 2024, time_increment))
